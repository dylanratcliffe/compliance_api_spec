{
  "openapi": "3.0.0",
  "info": {
    "title": "Puppet Compliance API",
    "description": "# Using the API TEST\n\n## Object Hierarachy\n\n``` TODO: Finish this\nStandard\nItem\nSection\nResource\nEvent\n```\n\nEach of these objects has a many to-one relationhsip with its upstream counterpart.\n\n# Puppet Integration\n\nIn order for the compliance API to be able to query the Puppet database and filter out events/resources that are not relevant to compliance, all resoures that are to appear in the compliance API must be tagged. The Compliance API server will then extract data based on these tags.\n\nEach resource must have at least the following tags:\n\n  - **Standard Name:** The name of the standard, as returned by the `/standard` endpoint\n  - **Item Number:** The number of the item that the resource is relevant to. This must match the `item_syntax` regular expression\n\nAn example of enforcing item `V-38598` from the `STIG_RHEL_6` standard would be as follows:\n\n```puppet\nservice { 'rexecd':\n  ensure => stopped,\n  enable => false,\n  tag    => [\n    'STIG_RHEL_6',\n    'V-38598',\n  ],\n}\n```\n\nThese tags can be applied on a per-resource basis, or to an entire scope using the [tag()](https://puppet.com/docs/puppet/5.3/lang_tags.html#the-tag-function) function.\n\nProperly tagging resources is the only thing that is required from the Puppet side in order to use this API.\n",
    "version": "0.1.0",
    "contact": {
      "email": "dylanratcliffe@outlook.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://localhost/v1",
      "description": "TODO"
    }
  ],
  "tags": [
    {
      "name": "event",
      "description": "Gives details of events, a child of resources"
    },
    {
      "name": "item",
      "description": "Returns items TODO"
    },
    {
      "name": "resource",
      "description": "Gives details of resources, a child of items"
    },
    {
      "name": "section",
      "description": "Gives details of sections, a child of standards"
    },
    {
      "name": "standard",
      "description": "Gives hierarchical infomration about standards. Can be used to get all data in one query, or to iteratively build queries."
    }
  ],
  "paths": {
    "/standards": {
      "get": {
        "summary": "Returns all standards.",
        "operationId": "getStandards",
        "tags": [
          "standard"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DetailLevel"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of all standard objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/BasicStandard"
                      },
                      {
                        "$ref": "#/components/schemas/FullStandard"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "object_type"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/standards/{standard}": {
      "get": {
        "summary": "Returns one specific standard.",
        "operationId": "getStandard",
        "tags": [
          "standard"
        ],
        "parameters": [
          {
            "name": "standard",
            "in": "path",
            "required": true,
            "description": "`name` of the standard",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/DetailLevel"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns one standard",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BasicStandard"
                    },
                    {
                      "$ref": "#/components/schemas/FullStandard"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "object_type"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sections": {
      "get": {
        "summary": "Return all sections. Can be filtered.",
        "operationId": "getSections",
        "tags": [
          "section"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Standard"
          },
          {
            "$ref": "#/components/parameters/DetailLevel"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all sections for a given standard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/BasicSection"
                      },
                      {
                        "$ref": "#/components/schemas/FullSection"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sections/{uuid}": {
      "get": {
        "summary": "Return a given section",
        "operationId": "getSection",
        "tags": [
          "section"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUID"
          },
          {
            "$ref": "#/components/parameters/DetailLevel"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns one section",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BasicSection"
                    },
                    {
                      "$ref": "#/components/schemas/FullSection"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sections/{uuid}/subsections": {
      "get": {
        "summary": "Return all subsections for a given section",
        "operationId": "getSectionSubsections",
        "tags": [
          "section"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUID"
          },
          {
            "$ref": "#/components/parameters/DetailLevel"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all sections for a given standard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/BasicSection"
                      },
                      {
                        "$ref": "#/components/schemas/FullSection"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/items": {
      "get": {
        "summary": "Search for items.",
        "operationId": "getItems",
        "tags": [
          "item"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DetailLevel"
          },
          {
            "$ref": "#/components/parameters/Standard"
          },
          {
            "name": "section",
            "in": "query",
            "required": false,
            "description": "`uuid` of the section",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all items for all standards",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/BasicItem"
                      },
                      {
                        "$ref": "#/components/schemas/FullItem"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/items/{uuid}": {
      "get": {
        "summary": "Returns one specific item",
        "operationId": "getItem",
        "tags": [
          "item"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUID"
          },
          {
            "$ref": "#/components/parameters/DetailLevel"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the queried item",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BasicItem"
                    },
                    {
                      "$ref": "#/components/schemas/FullItem"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/resources": {
      "get": {
        "summary": "Queries resources",
        "operationId": "getResources",
        "tags": [
          "resource"
        ],
        "parameters": [
          {
            "name": "item",
            "in": "query",
            "required": false,
            "description": "`UUID` of the item",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "$ref": "#/components/parameters/DetailLevel"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of all resources for the requested standard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/BasicResource"
                      },
                      {
                        "$ref": "#/components/schemas/FullResource"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/resources/{uuid}": {
      "get": {
        "summary": "Get a given resource",
        "operationId": "getResource",
        "tags": [
          "resource"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "`UUID` of the resource",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "$ref": "#/components/parameters/DetailLevel"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of all resources for the requested standard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/BasicResource"
                      },
                      {
                        "$ref": "#/components/schemas/FullResource"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/events": {
      "get": {
        "summary": "Queries events",
        "operationId": "getEvents",
        "tags": [
          "event"
        ],
        "parameters": [
          {
            "name": "resource",
            "in": "query",
            "required": false,
            "description": "`UUID` of the resource",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "$ref": "#/components/parameters/DetailLevel"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of all events for a given resource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "Standard": {
        "name": "standard",
        "in": "query",
        "required": false,
        "description": "`name` of the standard",
        "schema": {
          "type": "string"
        }
      },
      "Item": {
        "name": "item",
        "in": "path",
        "required": true,
        "description": "`id` of the item",
        "schema": {
          "type": "string"
        }
      },
      "DetailLevel": {
        "description": "Level of detail to return.\n\n**basic:** includes only the object itself, without any children\n\n**full:** Returns the object and all children, grandchildren, etc.",
        "in": "query",
        "name": "level",
        "schema": {
          "type": "string",
          "enum": [
            "basic",
            "full"
          ],
          "default": "basic"
        },
        "required": false
      },
      "UUID": {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "`uuid` of object that is being queried",
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      }
    },
    "schemas": {
      "BasicStandard": {
        "type": "object",
        "properties": {
          "object_type": {
            "type": "string",
            "enum": [
              "BasicStandard"
            ]
          },
          "name": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date of publication of the standard"
          },
          "description": {
            "type": "string",
            "description": "Long description of the standard. This should be expected to be markdown by anything consuming it"
          },
          "title": {
            "type": "string",
            "description": "Short title of the standard"
          },
          "version": {
            "type": "string",
            "description": "Free text version"
          },
          "item_syntax": {
            "type": "string",
            "description": "Regular expression that is used to determine which other tag on each resource determines the \"item\" that it is relevant to. If this contains capturing groups, the groups are used to determine sections and subsections e.g. `^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.$` would mean that the API is expecting versions like so:\n\n `1.2.3`\n\n And that the subsections are as follows:\n\n `[1, 2, 3]`\n\n If the regular expression that is provided does not have any capturin groups, we can assume that the standard does not have sections. In this scenario the `sections` attribute will return `null` and hen doing the full compliance query everything will just come back in a flat thing"
          },
          "section_separator": {
            "type": "string",
            "description": "This is what is used to construct the names of each section. If a section is found that has subsections, the capturing groups will be joined using the separator giving nice subsection names such as \\\"1.1.3\\\". If this is set to `null`, subsections will not be joined and will be names exactly as captured in the capturing group."
          },
          "compliance": {
            "type": "object",
            "description": "This should return a summary of the compliance information of all `items` and `sections` under this standard. you could possibly argue that this should also return the `resource` and `event` info but I feel like that's probably a bit much. It can always be added later if required.",
            "properties": {
              "compliant": {
                "type": "boolean",
                "description": "Returns true if all child `items`, including those from subsections, also return `true` for this value."
              },
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ComplianceCount"
                  },
                  {
                    "description": "This is the compliance state of all items that are **direct** decendants of this standard."
                  }
                ]
              },
              "sections": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ComplianceCount"
                  },
                  {
                    "description": "Compliance count of all sections based on their boolean compliance value"
                  }
                ]
              }
            }
          }
        }
      },
      "FullStandard": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicStandard"
          },
          {
            "type": "object",
            "properties": {
              "object_type": {
                "type": "string",
                "enum": [
                  "FullStandard"
                ]
              },
              "sections": {
                "type": "array",
                "nullable": true,
                "description": "Remember that is is possible that a standard will have no sections, just items.",
                "items": {
                  "$ref": "#/components/schemas/FullSection"
                }
              },
              "items": {
                "type": "array",
                "nullable": true,
                "description": "It is possible for a standard to have no sections, only items. This is provided for that purpose however it will usually be `null`",
                "items": {
                  "$ref": "#/components/schemas/FullItem"
                }
              }
            }
          }
        ]
      },
      "BasicSection": {
        "type": "object",
        "description": "Hash containing the names and descriptions of all the sections and their items and subsections. Sections are dynamically generated from the resources that have been discovered, with the `description` coming from the standard backend. It is important that the final capturing group for each section is ignored. This means that if you have a standard like `5.12.3` and one like `1.2.35.123` you don't end up with a section called `5.12.3` with only one thing in it.",
        "properties": {
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          },
          "name": {
            "type": "string",
            "description": "The name of the section is just all the capturing groups minus the last one, joined with the `section_separator` from the `standard`"
          },
          "standard": {
            "type": "string",
            "description": "Name of the standard that the section is relevant to. This is not likely to be very useful as the structure of the `/standards` and `/compliance` endpoints will imply the standard from the structure of the return value, but we have the info so we may as well provide it."
          },
          "description": {
            "type": "string",
            "description": "Description of the section. This comes from the standard backend, should support markdown as should all long text fields."
          },
          "compliance": {
            "type": "object",
            "description": "This should return a summary of the compliance information of all `items` under this section. you could possibly argue that this should also return the `resource` and `event` info but I feel like that's probably a bit much. It can always be added later if required.",
            "properties": {
              "compliant": {
                "type": "boolean",
                "description": "Returns true if all child `items`, including those from subsections, also return `true` for this value."
              },
              "direct_items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ComplianceCount"
                  },
                  {
                    "description": "This is the compliance state of all items that are direct decendants of this section. Subsections are not counted"
                  }
                ]
              },
              "all_items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ComplianceCount"
                  },
                  {
                    "description": "Compliance state of all direct child items and and the child items of all subsecions, and their subsecions, and their subsecions... you get it"
                  }
                ]
              },
              "subsections": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ComplianceCount"
                  },
                  {
                    "description": "Compliance count of all subsections based on their boolean compliance value"
                  }
                ]
              }
            }
          }
        }
      },
      "FullSection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicSection"
          },
          {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FullItem"
                }
              },
              "subsections": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/FullSection"
                }
              }
            }
          }
        ]
      },
      "BasicItem": {
        "type": "object",
        "properties": {
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          },
          "id": {
            "type": "string",
            "description": "The ID of the item is the `subsection_path`, joined with the `subsection_separator` from the `standard` e.g. `1.1.1.3`"
          },
          "title": {
            "type": "string",
            "description": "Short title"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description of the item. This should support markdown"
          },
          "severity": {
            "type": "string",
            "nullable": true,
            "description": "A string representing the severity of the `item`. Possibly the `standard` should define some way of telling actually how severe something is so that it can have a colour or something."
          },
          "section_uuid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "description": "UUID of the section that this item is relevant to. Can also return `null` if the item is a direct child of a standard. *TODO: Is this required? Seems like this is making it very relational-database-ey, does it really need to be here?*",
                "nullable": true
              }
            ]
          },
          "subsection_path": {
            "type": "array",
            "description": "This is an array of the capturinng groups that have been found for this item. If there are no subsections this will be an empty array",
            "items": {
              "type": "integer"
            }
          },
          "compliance": {
            "type": "object",
            "nullable": true,
            "description": "This provides the basic `compliant` boolean value, plus details around the compliance state of both resources and their subsequent events. This is meant to take load off the client. A UI can use this information to choose how the level of compliance is represented. e.g. 50% compliance could mean that of the two resources that enforce this standard, one of them has at least one non-compliant event. 50% compliance could also mean that both resources which enforce this standard have failures on 50% of their nodes. The first example represents a much lower rate of non-compliance overall (probably), but it is up to the end user how they choose to interpret the data. It would also allow for the use of a multi-layered doughnut chart which should be a very nice way to represent this. Resources around the outside and events on the inside.",
            "properties": {
              "compliant": {
                "type": "boolean",
                "description": "Returns true if all resources are compliant, false if any are non-compliant in any way"
              },
              "resources": {
                "$ref": "#/components/schemas/ComplianceCount"
              },
              "events": {
                "$ref": "#/components/schemas/ComplianceCount"
              }
            }
          }
        }
      },
      "FullItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicItem"
          },
          {
            "type": "object",
            "properties": {
              "resources": {
                "type": "array",
                "description": "Array of all the resources that are used to enforce this standard.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/FullResource"
                }
              }
            }
          }
        ]
      },
      "BasicResource": {
        "type": "object",
        "description": "This represents a Puppet resource. The property names and values are the same as those returned by the PuppetDB API with the exception of things that will change on a per-host basis such as `parameters`, `certname`, `resource` and `exported`.",
        "properties": {
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          },
          "tags": {
            "type": "array",
            "description": "From PuppetDB",
            "items": {
              "type": "string"
            }
          },
          "file": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "type": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "title": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "attribute": {
            "type": "string",
            "description": "This describes the attribute that is relevant to the specific item, it does not come from PuppetDB. It is possible that one resource could be relevant to multiple items, possibly from multiple standards. The attribute proprty allows us to differentiate which items are out of compliance when a resource has failed or is in noop mode."
          },
          "line": {
            "type": "integer",
            "description": "From PuppetDB"
          },
          "compliance": {
            "type": "object",
            "properties": {
              "compliant": {
                "type": "boolean",
                "description": "Returns true if all events are compliant, false if any are non-compliant in any way"
              },
              "events": {
                "allOf": [
                  {
                    "description": "Summary of how many compliant and non-compliant events exist. This is provided for flexibility so that the UI can represent the data in any format it wants without undue computational stress on the client. Especially useful if there are 100,000 servers that have the same resource on them. Good luck getting JavaScript to calculate that in Internet Explorer."
                  },
                  {
                    "$ref": "#/components/schemas/ComplianceCount"
                  }
                ]
              }
            }
          }
        }
      },
      "FullResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicResource"
          },
          {
            "type": "object",
            "properties": {
              "events": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        ]
      },
      "Event": {
        "type": "object",
        "description": "Represents a Puppet event, however it it used slightly differently in this context. The fact that there was an event means that something was or is currently out of compliance. Noop/Failure means that it is currently out of compliance, and a change means that it was out of compliance but has now been fixed.",
        "properties": {
          "new_value": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "report": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "corrective_change": {
            "type": "boolean",
            "description": "From PuppetDB"
          },
          "run_start_time": {
            "type": "string",
            "format": "date-time",
            "description": "From PuppetDB"
          },
          "property": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "file": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "old_value": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "containing_class": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "line": {
            "type": "integer",
            "description": "From PuppetDB"
          },
          "resource_type": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "status": {
            "type": "string",
            "enum": [
              "success",
              "failure"
            ],
            "description": "From PuppetDB"
          },
          "configuration_version": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "resource_title": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "environment": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "From PuppetDB"
          },
          "run_end_time": {
            "type": "string",
            "format": "date-time",
            "description": "From PuppetDB"
          },
          "report_receive_time": {
            "type": "string",
            "format": "date-time",
            "description": "From PuppetDB"
          },
          "containment_path": {
            "type": "array",
            "description": "From PuppetDB",
            "items": {
              "type": "string"
            }
          },
          "certname": {
            "type": "string",
            "description": "From PuppetDB"
          },
          "message": {
            "type": "string",
            "description": "From PuppetDB"
          }
        }
      },
      "ComplianceCount": {
        "type": "object",
        "properties": {
          "percentage": {
            "description": "Percentage of things that are fully compliant (have zero non-compliant events)",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 1
          },
          "compliant": {
            "type": "integer"
          },
          "non_compliant": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "UUID": {
        "type": "string",
        "description": "UUID as per RFC 4122",
        "pattern": "[0-9A-f]{8}-[0-9A-f]{4}-[0-9A-f]{4}-[0-9A-f]{4}-[0-9A-f]{12}"
      }
    },
    "responses": {
      "Error": {
        "description": "A generic error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Describes an error.",
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "Not Found",
                    "Unknown Error"
                  ]
                },
                "code": {
                  "type": "integer"
                },
                "message": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          }
        }
      }
    }
  }
}